/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */

package com.google.tokenservice;

/**
 * Service definition for TokenService (v1).
 *
 * <p>
 * The Token Service API lets you exchange either an ID token or a refresh token for an access token and a new refresh token. You can use the access token to securely call APIs that require user authorization.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/identity/toolkit/reference/securetoken/rest/v1/token" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link TokenServiceRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class TokenService extends
        com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

    // Note: Leave this static initializer at the top of the file.
    static {
        com.google.api.client.util.Preconditions.checkState(
                com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
                        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
                "You are currently running with version %s of google-api-client. " +
                        "You need at least version 1.15 of google-api-client to run version " +
                        "1.25.0-SNAPSHOT of the Google Token Service API library.",
                com.google.api.client.googleapis.GoogleUtils.VERSION);
    }

    /**
     * The default encoded root URL of the service. This is determined when the library is generated
     * and normally should not be changed.
     *
     * @since 1.7
     */
    public static final String DEFAULT_ROOT_URL = "https://securetoken.googleapis.com/";

    /**
     * The default encoded service path of the service. This is determined when the library is
     * generated and normally should not be changed.
     *
     * @since 1.7
     */
    public static final String DEFAULT_SERVICE_PATH = "v1/";

    /**
     * The default encoded batch path of the service. This is determined when the library is
     * generated and normally should not be changed.
     *
     * @since 1.23
     */
    public static final String DEFAULT_BATCH_PATH = "";

    /**
     * The default encoded base URL of the service. This is determined when the library is generated
     * and normally should not be changed.
     */
    public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

    /**
     * Constructor.
     *
     * <p>
     * Use {@link Builder} if you need to specify any of the optional parameters.
     * </p>
     *
     * @param transport HTTP transport, which should normally be:
     * <ul>
     * <li>Google App Engine:
     * {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     * <li>Android: {@code newCompatibleTransport} from
     * {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     * <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     * </li>
     * </ul>
     * @param jsonFactory JSON factory, which may be:
     * <ul>
     * <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     * <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     * <li>Android Honeycomb or higher:
     * {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     * </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public TokenService(com.google.api.client.http.HttpTransport transport,
            com.google.api.client.json.JsonFactory jsonFactory,
            com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
        this(new Builder(transport, jsonFactory, httpRequestInitializer));
    }

    /**
     * @param builder builder
     */
    TokenService(Builder builder) {
        super(builder);
    }

    @Override
    protected void initialize(
            com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest)
            throws java.io.IOException {
        super.initialize(httpClientRequest);
    }

    /**
     * An accessor for creating requests from the V1 collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code TokenService tokenservice = new TokenService(...);}
     *   {@code TokenService.V1.List request = tokenservice.v1().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public V1 v1() {
        return new V1();
    }

    /**
     * The "v1" collection of methods.
     */
    public class V1 {

        /**
         * The Token Service API lets you exchange either an ID token or a refresh token for an
         * access token and a new refresh token. You can use the access token to securely call APIs
         * that require user authorization.
         *
         * Create a request for the method "v1.token".
         *
         * This request holds the parameters needed by the tokenservice server.  After setting any
         * optional parameters, call the {@link Token#execute()} method to invoke the remote
         * operation.
         *
         * @param content the {@link com.google.tokenservice.model.ExchangeTokenRequest}
         * @return the request
         */
        public Token token(com.google.tokenservice.model.ExchangeTokenRequest content)
                throws java.io.IOException {
            Token result = new Token(content);
            initialize(result);
            return result;
        }

        public class Token extends
                TokenServiceRequest<com.google.tokenservice.model.ExchangeTokenResponse> {

            private static final String REST_PATH = "token";

            /**
             * The Token Service API lets you exchange either an ID token or a refresh token for an
             * access token and a new refresh token. You can use the access token to securely call
             * APIs that require user authorization.
             *
             * Create a request for the method "v1.token".
             *
             * This request holds the parameters needed by the the tokenservice server.  After
             * setting any optional parameters, call the {@link Token#execute()} method to invoke
             * the remote operation.
             * <p> {@link
             * Token#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the
             * constructor. </p>
             *
             * @param content the {@link com.google.tokenservice.model.ExchangeTokenRequest}
             * @since 1.13
             */
            protected Token(com.google.tokenservice.model.ExchangeTokenRequest content) {
                super(TokenService.this, "POST", REST_PATH, content,
                        com.google.tokenservice.model.ExchangeTokenResponse.class);
            }

            @Override
            public Token setAlt(java.lang.String alt) {
                return (Token) super.setAlt(alt);
            }

            @Override
            public Token setKey(java.lang.String key) {
                return (Token) super.setKey(key);
            }

            @Override
            public Token set(String parameterName, Object value) {
                return (Token) super.set(parameterName, value);
            }
        }

    }

    /**
     * Builder for {@link TokenService}.
     *
     * <p>
     * Implementation is not thread-safe.
     * </p>
     *
     * @since 1.3.0
     */
    public static final class Builder extends
            com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

        /**
         * Returns an instance of a new builder.
         *
         * @param transport HTTP transport, which should normally be:
         * <ul>
         * <li>Google App Engine:
         * {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
         * <li>Android: {@code newCompatibleTransport} from
         * {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
         * <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
         * </li>
         * </ul>
         * @param jsonFactory JSON factory, which may be:
         * <ul>
         * <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
         * <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
         * <li>Android Honeycomb or higher:
         * {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
         * </ul>
         * @param httpRequestInitializer HTTP request initializer or {@code null} for none
         * @since 1.7
         */
        public Builder(com.google.api.client.http.HttpTransport transport,
                com.google.api.client.json.JsonFactory jsonFactory,
                com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
            super(
                    transport,
                    jsonFactory,
                    DEFAULT_ROOT_URL,
                    DEFAULT_SERVICE_PATH,
                    httpRequestInitializer,
                    false);
            setBatchPath(DEFAULT_BATCH_PATH);
        }

        /**
         * Builds a new instance of {@link TokenService}.
         */
        @Override
        public TokenService build() {
            return new TokenService(this);
        }

        @Override
        public Builder setRootUrl(String rootUrl) {
            return (Builder) super.setRootUrl(rootUrl);
        }

        @Override
        public Builder setServicePath(String servicePath) {
            return (Builder) super.setServicePath(servicePath);
        }

        @Override
        public Builder setBatchPath(String batchPath) {
            return (Builder) super.setBatchPath(batchPath);
        }

        @Override
        public Builder setHttpRequestInitializer(
                com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
            return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
        }

        @Override
        public Builder setApplicationName(String applicationName) {
            return (Builder) super.setApplicationName(applicationName);
        }

        @Override
        public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
            return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
        }

        @Override
        public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
            return (Builder) super
                    .setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
        }

        @Override
        public Builder setSuppressAllChecks(boolean suppressAllChecks) {
            return (Builder) super.setSuppressAllChecks(suppressAllChecks);
        }

        /**
         * Set the {@link TokenServiceRequestInitializer}.
         *
         * @since 1.12
         */
        public Builder setTokenServiceRequestInitializer(
                TokenServiceRequestInitializer tokenserviceRequestInitializer) {
            return (Builder) super
                    .setGoogleClientRequestInitializer(tokenserviceRequestInitializer);
        }

        @Override
        public Builder setGoogleClientRequestInitializer(
                com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
            return (Builder) super
                    .setGoogleClientRequestInitializer(googleClientRequestInitializer);
        }
    }
}
