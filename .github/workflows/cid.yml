name: CI/CD

on: [push, pull_request]
env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process
  CI: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch tags and history
        run: |
          git fetch --depth=1 --progress origin +refs/tags/*:refs/tags/*
          git fetch --prune --unshallow --progress
      - name: Install JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Gradle Cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-v2-gradle-build-${{ hashFiles('**/*') }}
          restore-keys: |
            ${{ runner.os }}-v2-gradle-build-
            ${{ runner.os }}-v2-gradle-
      - name: Validate Gradle integrity
        uses: gradle/wrapper-validation-action@v1
      - name: Build debug project
        run: ./gradlew assembleDebug -S
        if: github.ref != 'refs/heads/master'
      - name: Build release project
        run: ./gradlew assembleRelease -PrelBuild -S
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
      - name: Upload outputs
        uses: actions/upload-artifact@v1
        with:
          name: outputs
          path: app/build/outputs/

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Gradle Cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-v2-gradle-test-${{ hashFiles('**/*') }}
          restore-keys: |
            ${{ runner.os }}-v2-gradle-test-
            ${{ runner.os }}-v2-gradle-
      - name: Run tests
        run: ./gradlew check test lint -S
      - name: Upload reports
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: test-reports
          path: app/build/reports/

  test_ui:
    runs-on: ubuntu-latest
    if: false # TODO re-enable once back in the office
    env:
      MASON_API_KEY: ${{ secrets.MASON_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Install adb
        run: |
          wget --output-document sdk-tools-linux.zip https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip
          unzip sdk-tools-linux.zip
          echo 'y' | ./tools/bin/sdkmanager --install 'platform-tools'
      - name: Gradle Cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-v2-gradle-test-ui-${{ hashFiles('**/*') }}
          restore-keys: |
            ${{ runner.os }}-v2-gradle-test-ui-
            ${{ runner.os }}-v2-gradle-test-
            ${{ runner.os }}-v2-gradle-
      - name: Prep CLI
        run: |
          curl -Lo mason https://github.com/MasonAmerica/mason-cli/releases/download/1.7/mason-linux
          chmod +x mason
          cp mason-os/adbkey ~/.android
          cp mason-os/adbkey.pub ~/.android
      - name: Run screenshot tests
        continue-on-error: true
        run: |
          $ANDROID_HOME/platform-tools/adb kill-server
          $ANDROID_HOME/platform-tools/adb devices
          ./mason xray a50b1ad7-8f24-4bba-a39b-86e1fec5ee62 adbproxy &
          sleep 15
          $ANDROID_HOME/platform-tools/adb connect localhost:5555
          $ANDROID_HOME/platform-tools/adb devices

          ./gradlew executeScreenshotTests -S

          kill $!
      - name: Upload reports
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: ui-test-reports
          path: app/build/reports/

  deploy_web:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Install NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Gradle Cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-v2-gradle-deploy-${{ hashFiles('**/*') }}
          restore-keys: |
            ${{ runner.os }}-v2-gradle-deploy-
            ${{ runner.os }}-v2-gradle-
      - name: Deploy website + backend
        run: ./gradlew deploy

  deploy_mason_dev:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    env:
      MASON_API_KEY: ${{ secrets.MASON_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download outputs
        uses: actions/download-artifact@v1
        with:
          name: outputs
          path: mason-os/dev/apps
      - name: Prep CLI
        run: |
          curl -Lo mason https://github.com/MasonAmerica/mason-cli/releases/download/1.7/mason-linux
          chmod +x mason
          ./mason login -u $MASON_USERNAME -p $MASON_PASSWORD
        env:
          MASON_USERNAME: ${{ secrets.MASON_USERNAME }}
          MASON_PASSWORD: ${{ secrets.MASON_PASSWORD }}
      - name: Register Mason project
        run: ./mason register project mason-os/dev
      - name: Deploy Mason
        run: |
          ./mason deploy --push config officeos-g450-dev latest check-in-kiosk-g450-dev
          ./mason deploy --push config officeos-g430-dev latest check-in-kiosk-g430-dev

  deploy_mason_prod:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    env:
      MASON_API_KEY: ${{ secrets.MASON_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download outputs
        uses: actions/download-artifact@v1
        with:
          name: outputs
          path: mason-os/prod/apps
      - name: Prep CLI
        run: |
          curl -Lo mason https://github.com/MasonAmerica/mason-cli/releases/download/1.7/mason-linux
          chmod +x mason
          ./mason login -u $MASON_USERNAME -p $MASON_PASSWORD
        env:
          MASON_USERNAME: ${{ secrets.MASON_USERNAME }}
          MASON_PASSWORD: ${{ secrets.MASON_PASSWORD }}
      - name: Register Mason project
        run: ./mason register project mason-os/prod
      - name: Deploy Mason
        run: |
          ./mason deploy --push config officeos-g450 latest check-in-kiosk-g450
          ./mason deploy --push config officeos-g430 latest check-in-kiosk-g430
